# Plantilla Base para PRP

## üìã Estructura del PRP

```markdown
# [NOMBRE DEL PRP] - [DESCRIPCI√ìN BREVE]

## üéØ Prop√≥sito y Contexto

### Descripci√≥n General
[Descripci√≥n clara y concisa del objetivo del PRP]

### Contexto del Proyecto
- **Arquitectura actual**: [Descripci√≥n de la arquitectura existente]
- **Tecnolog√≠as utilizadas**: [Lista de tecnolog√≠as principales]
- **Patrones establecidos**: [Patrones de dise√±o y convenciones]

### Justificaci√≥n
[Explicaci√≥n de por qu√© se necesita esta implementaci√≥n]

## üìã Requisitos T√©cnicos

### Funcionalidades Principales
- [ ] [Funcionalidad 1]
- [ ] [Funcionalidad 2]
- [ ] [Funcionalidad 3]

### Dependencias
```python
# Dependencias principales
package1>=1.0.0
package2>=2.0.0

# Dependencias de desarrollo
pytest>=7.0.0
black>=23.0.0
```

### Configuraci√≥n Requerida
```bash
# Variables de entorno
ENV_VAR_1=value1
ENV_VAR_2=value2
```

## üèóÔ∏è Arquitectura y Dise√±o

### Estructura de Archivos
```
project/
‚îú‚îÄ‚îÄ [nuevo_directorio]/
‚îÇ   ‚îú‚îÄ‚îÄ __init__.py
‚îÇ   ‚îú‚îÄ‚îÄ [archivo_principal].py
‚îÇ   ‚îú‚îÄ‚îÄ [archivo_secundario].py
‚îÇ   ‚îî‚îÄ‚îÄ tests/
‚îÇ       ‚îú‚îÄ‚îÄ __init__.py
‚îÇ       ‚îî‚îÄ‚îÄ test_[archivo_principal].py
‚îî‚îÄ‚îÄ [archivos_existentes_modificados]
```

### Patrones de Dise√±o
- **Patr√≥n 1**: [Descripci√≥n y justificaci√≥n]
- **Patr√≥n 2**: [Descripci√≥n y justificaci√≥n]

### Integraci√≥n con C√≥digo Existente
- **Archivos a modificar**: [Lista de archivos existentes]
- **APIs a extender**: [APIs existentes a modificar]
- **Configuraciones a actualizar**: [Configuraciones existentes]

## üîß Plan de Implementaci√≥n

### Fase 1: Configuraci√≥n Inicial
1. **Crear estructura de directorios**
   ```bash
   mkdir -p [nuevo_directorio]/tests
   touch [nuevo_directorio]/__init__.py
   ```

2. **Configurar dependencias**
   - Agregar dependencias a requirements.txt
   - Instalar dependencias: `pip install -r requirements.txt`

3. **Configurar variables de entorno**
   - Actualizar .env.example
   - Documentar variables requeridas

### Fase 2: Implementaci√≥n Core
1. **Implementar [componente_principal]**
   - Crear [archivo_principal].py
   - Implementar funcionalidad b√°sica
   - Agregar validaciones

2. **Implementar [componente_secundario]**
   - Crear [archivo_secundario].py
   - Integrar con [componente_principal]
   - Manejar errores

3. **Integrar con sistema existente**
   - Modificar [archivos_existentes]
   - Actualizar configuraciones
   - Verificar compatibilidad

### Fase 3: Testing y Validaci√≥n
1. **Crear tests unitarios**
   - Tests para [componente_principal]
   - Tests para [componente_secundario]
   - Tests de integraci√≥n

2. **Implementar validaciones**
   - Validaciones autom√°ticas
   - Tests de edge cases
   - Validaciones de rendimiento

### Fase 4: Documentaci√≥n y Refinamiento
1. **Actualizar documentaci√≥n**
   - README.md
   - Docstrings de funciones
   - Documentaci√≥n de API

2. **Optimizaci√≥n y limpieza**
   - Revisar c√≥digo
   - Optimizar rendimiento
   - Limpiar imports no utilizados

## üß™ Testing y Validaci√≥n

### Estrategia de Testing
- **Tests unitarios**: Cobertura >90%
- **Tests de integraci√≥n**: Validar flujos completos
- **Tests de edge cases**: Manejo de errores y casos l√≠mite

### Validaciones Autom√°ticas
```bash
# Sintaxis y estilo
ruff check --fix && mypy .

# Tests unitarios
pytest tests/ -v

# Cobertura de c√≥digo
pytest --cov=src --cov-report=html

# Validaciones espec√≠ficas
[comandos_espec√≠ficos_del_prp]
```

### Criterios de Aceptaci√≥n
- [ ] **Funcionalidad**: Todas las caracter√≠sticas implementadas
- [ ] **Tests**: Todos los tests pasan
- [ ] **Cobertura**: >90% de cobertura de c√≥digo
- [ ] **Estilo**: C√≥digo cumple est√°ndares de estilo
- [ ] **Documentaci√≥n**: Documentaci√≥n actualizada
- [ ] **Rendimiento**: Cumple m√©tricas de rendimiento

## üéØ Criterios de √âxito

### Funcionalidad
- [ ] [Criterio funcional 1]
- [ ] [Criterio funcional 2]
- [ ] [Criterio funcional 3]

### Calidad
- [ ] C√≥digo sigue patrones del proyecto
- [ ] Manejo de errores robusto
- [ ] Logging apropiado implementado
- [ ] No hay regresiones en funcionalidad existente

### Rendimiento
- [ ] [M√©trica de rendimiento 1]
- [ ] [M√©trica de rendimiento 2]

## üìö Referencias y Documentaci√≥n

### Documentaci√≥n Oficial
- [URL de documentaci√≥n 1]
- [URL de documentaci√≥n 2]

### Ejemplos y Patrones
- [Archivo de ejemplo 1]
- [Archivo de ejemplo 2]

### Recursos Adicionales
- [GitHub repo relevante]
- [Stack Overflow post √∫til]
- [Blog post con patrones]

## ‚ö†Ô∏è Consideraciones y Gotchas

### Problemas Conocidos
- [Problema 1 y soluci√≥n]
- [Problema 2 y soluci√≥n]

### Limitaciones
- [Limitaci√≥n 1]
- [Limitaci√≥n 2]

### Notas de Implementaci√≥n
- [Nota importante 1]
- [Nota importante 2]
```

## üéØ Uso de la Plantilla

### Personalizaci√≥n
1. **Reemplaza [placeholders]** con informaci√≥n espec√≠fica
2. **Adapta secciones** seg√∫n necesidades del proyecto
3. **Agrega o elimina fases** seg√∫n complejidad
4. **Personaliza validaciones** seg√∫n tecnolog√≠as

### Validaci√≥n de Plantilla
- [ ] Todos los placeholders reemplazados
- [ ] Informaci√≥n espec√≠fica del proyecto incluida
- [ ] Validaciones adaptadas a tecnolog√≠as
- [ ] Criterios de √©xito definidos claramente
description:
globs:
alwaysApply: false
---
