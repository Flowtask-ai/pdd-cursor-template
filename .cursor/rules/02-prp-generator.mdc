# Generador de PRP - Product Requirements Prompt

## 🎯 Propósito

Cuando se solicite generar un PRP, actúa como un experto en Context Engineering para crear un Product Requirements Prompt completo y detallado que permita implementación exitosa en un solo intento.

## 📋 Proceso de Generación

### 1. Análisis de la Solicitud
- **Lee completamente** el archivo `FEATURE_REQUEST.md`
- **Identifica todos los requisitos** técnicos y funcionales
- **Analiza los ejemplos referenciados** para entender patrones
- **Revisa la documentación** proporcionada

### 2. Investigación del Código Base
- **Busca patrones similares** en el código existente
- **Identifica convenciones** de nomenclatura y estructura
- **Analiza la arquitectura** actual del proyecto
- **Revisa tests existentes** para entender patrones de testing

### 3. Investigación Externa
- **Consulta la documentación** oficial de las librerías mencionadas
- **Busca mejores prácticas** para las tecnologías involucradas
- **Identifica patrones comunes** y gotchas conocidas
- **Recopila ejemplos** de implementaciones similares

### 4. Creación del PRP
- **Usa la plantilla** en `.cursor/rules/templates/prp-base.mdc`
- **Incluye contexto completo** y documentación relevante
- **Define pasos de implementación** detallados
- **Especifica validaciones** ejecutables
- **Establece criterios de éxito** claros

## 📝 Estructura del PRP

### Secciones Requeridas
1. **Propósito y Contexto**
   - Descripción clara del objetivo
   - Contexto del proyecto y arquitectura
   - Justificación de la implementación

2. **Requisitos Técnicos**
   - Especificaciones detalladas
   - Dependencias y librerías
   - Configuración requerida

3. **Arquitectura y Diseño**
   - Estructura de archivos propuesta
   - Patrones de diseño a seguir
   - Integración con código existente

4. **Plan de Implementación**
   - Pasos detallados y secuenciales
   - Validaciones en cada paso
   - Manejo de errores

5. **Testing y Validación**
   - Estrategia de testing
   - Criterios de aceptación
   - Validaciones automáticas

6. **Criterios de Éxito**
   - Métricas específicas
   - Funcionalidad requerida
   - Calidad del código

## 🔍 Validaciones Incluidas

### Validaciones Automáticas
```bash
# Sintaxis y estilo
ruff check --fix && mypy .

# Tests unitarios
pytest tests/ -v

# Cobertura de código
pytest --cov=src --cov-report=html

# Documentación
pydocstyle src/
```

### Validaciones Manuales
- [ ] Funcionalidad cumple requisitos especificados
- [ ] Código sigue patrones del proyecto
- [ ] Documentación está actualizada
- [ ] No hay regresiones en funcionalidad existente

## 📊 Calidad del PRP

### Checklist de Calidad
- [ ] **Contexto completo**: Incluye toda la información necesaria
- [ ] **Pasos claros**: Implementación paso a paso detallada
- [ ] **Validaciones ejecutables**: Comandos que se pueden ejecutar
- [ ] **Referencias correctas**: Archivos y patrones existentes
- [ ] **Documentación incluida**: URLs y recursos relevantes
- [ ] **Criterios medibles**: Éxito definido claramente

### Puntuación de Confianza
**Evalúa el PRP en una escala de 1-10** basado en:
- **Completitud del contexto** (1-3 puntos)
- **Claridad de implementación** (1-3 puntos)
- **Calidad de validaciones** (1-2 puntos)
- **Referencias y documentación** (1-2 puntos)

## 🎯 Mejores Prácticas

### Escritura de PRPs
- **Sé específico y detallado** en cada paso
- **Incluye ejemplos de código** cuando sea apropiado
- **Referencia patrones existentes** del proyecto
- **Anticipa problemas comunes** y proporciona soluciones

### Organización
- **Usa encabezados claros** para cada sección
- **Numera los pasos** de implementación
- **Incluye comandos ejecutables** para validaciones
- **Mantén un formato consistente** con el resto del proyecto

### Validación
- **Verifica que todos los archivos referenciados** existen
- **Confirma que las URLs** están accesibles
- **Asegúrate de que los comandos** son ejecutables
- **Valida que los criterios de éxito** son alcanzables
description:
globs:
alwaysApply: false
---
