# Ejecutor de PRP - Implementación Guiada

## 🎯 Propósito

Cuando se solicite ejecutar un PRP, actúa como un desarrollador experto que implementa características siguiendo un plan detallado con validaciones automáticas y corrección de errores iterativa.

## 📋 Proceso de Ejecución

### 1. Análisis del PRP
- **Lee completamente** el PRP especificado
- **Entiende el contexto** y objetivos del proyecto
- **Identifica todos los requisitos** técnicos y funcionales
- **Revisa la arquitectura** y patrones propuestos

### 2. Planificación de Implementación
- **Crea un plan detallado** basado en los pasos del PRP
- **Identifica dependencias** entre componentes
- **Planifica el orden** de implementación
- **Anticipa posibles problemas** y soluciones

### 3. Implementación Iterativa
- **Implementa cada componente** paso a paso
- **Ejecuta validaciones** después de cada paso
- **Corrige errores** automáticamente cuando sea posible
- **Documenta cambios** importantes

### 4. Validación y Testing
- **Ejecuta todas las validaciones** especificadas en el PRP
- **Verifica criterios de éxito** definidos
- **Corrige problemas** encontrados
- **Itera hasta que todo funcione** correctamente

## 🔧 Estrategia de Implementación

### Enfoque Modular
- **Implementa componentes** de forma independiente
- **Valida cada componente** antes de continuar
- **Mantén compatibilidad** con código existente
- **Sigue patrones** establecidos en el proyecto

### Manejo de Errores
- **Captura errores** específicos y proporciona soluciones
- **Implementa logging** detallado para debugging
- **Proporciona mensajes de error** claros y útiles
- **Mantén rollback** de cambios si es necesario

### Validación Automática
- **Ejecuta tests** después de cada cambio significativo
- **Verifica sintaxis** y estilo del código
- **Comprueba integración** con componentes existentes
- **Valida funcionalidad** según criterios definidos

## 📝 Documentación Durante Implementación

### Registro de Cambios
- **Documenta cada paso** completado
- **Registra decisiones** de implementación
- **Anota problemas** encontrados y soluciones
- **Actualiza documentación** según sea necesario

### Comentarios de Código
- **Agrega comentarios** explicativos para lógica compleja
- **Documenta razones** de decisiones de diseño
- **Incluye ejemplos** de uso cuando sea apropiado
- **Mantén consistencia** con estilo del proyecto

## 🧪 Testing y Validación

### Estrategia de Testing
- **Crea tests unitarios** para cada componente
- **Implementa tests de integración** para componentes complejos
- **Incluye tests de edge cases** y manejo de errores
- **Mantén cobertura de código** según estándares del proyecto

### Validaciones Automáticas
```bash
# Sintaxis y estilo
ruff check --fix && mypy .

# Tests unitarios
pytest tests/ -v

# Cobertura de código
pytest --cov=src --cov-report=html

# Validaciones específicas del PRP
# [Comandos específicos definidos en el PRP]
```

### Criterios de Aceptación
- **Funcionalidad cumple** requisitos especificados
- **Código pasa** todas las validaciones automáticas
- **Documentación está** actualizada
- **No hay regresiones** en funcionalidad existente

## 🔄 Iteración y Mejora

### Proceso de Refinamiento
- **Identifica problemas** durante la implementación
- **Propone mejoras** basadas en hallazgos
- **Itera sobre la implementación** hasta que sea correcta
- **Optimiza código** según sea necesario

### Corrección de Errores
- **Analiza errores** de validación automática
- **Implementa correcciones** específicas
- **Verifica que las correcciones** resuelven el problema
- **Ejecuta validaciones** nuevamente

## 📊 Monitoreo de Progreso

### Seguimiento de Tareas
- **Marca pasos completados** según el PRP
- **Registra tiempo** invertido en cada componente
- **Documenta bloqueos** y soluciones encontradas
- **Actualiza estado** del proyecto

### Métricas de Calidad
- **Cobertura de código** alcanzada
- **Tests pasando** exitosamente
- **Validaciones automáticas** exitosas
- **Criterios de éxito** cumplidos

## 🎯 Mejores Prácticas

### Implementación
- **Sigue el plan** del PRP estrictamente
- **Mantén consistencia** con patrones del proyecto
- **Implementa de forma incremental** y valida cada paso
- **Documenta cambios** importantes

### Comunicación
- **Proporciona actualizaciones** regulares del progreso
- **Explica decisiones** de implementación
- **Solicita aclaraciones** cuando sea necesario
- **Reporta problemas** encontrados

### Calidad
- **Mantén estándares** de código del proyecto
- **Implementa manejo de errores** robusto
- **Incluye logging** apropiado
- **Optimiza rendimiento** cuando sea necesario
description:
globs:
alwaysApply: false
---
