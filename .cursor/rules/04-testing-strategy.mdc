# Testing Strategy Rules

## 🧪 Testing Pyramid

### Unit Tests (70%)
- Test individual functions and methods
- Use mocking for external dependencies
- Achieve high code coverage (>80%)
- Test edge cases and error conditions
- Use proper test naming conventions

### Integration Tests (20%)
- Test component interactions
- Test API endpoints and database operations
- Use test databases and external services
- Test authentication and authorization flows
- Implement proper test data setup

### E2E Tests (10%)
- Test complete user workflows
- Use real browsers and environments
- Test critical business paths
- Implement proper test data management
- Use proper test cleanup strategies

## 🛠️ Testing Tools

### Unit Testing Frameworks
- **Jest**: For JavaScript/TypeScript projects
- **pytest**: For Python projects
- **JUnit**: For Java projects
- **xUnit**: For .NET projects
- **Vitest**: For modern JavaScript projects

### E2E Testing Tools
- **Playwright**: Cross-browser testing
- **Cypress**: Modern web testing
- **Selenium**: Traditional web testing
- **Appium**: Mobile app testing

### Test Utilities
- **React Testing Library**: For React components
- **Vue Test Utils**: For Vue components
- **Testing Library**: For DOM testing
- **Mockito**: For Java mocking

## 📋 Testing Patterns

### Arrange-Act-Assert (AAA)
- **Arrange**: Set up test data and conditions
- **Act**: Execute the code being tested
- **Assert**: Verify the expected outcomes

### Given-When-Then (BDD)
- **Given**: Describe the initial context
- **When**: Describe the action or event
- **Then**: Describe the expected outcome

### Test Data Management
- Use factories for test data creation
- Implement proper test data cleanup
- Use faker libraries for realistic data
- Maintain test data consistency

## 🔍 Test Quality

### Test Naming
- Use descriptive test names
- Follow consistent naming conventions
- Include expected behavior in test names
- Use proper test organization

### Test Independence
- Each test should be independent
- Avoid test dependencies
- Use proper test isolation
- Implement proper test cleanup

### Test Maintainability
- Keep tests simple and readable
- Avoid complex test logic
- Use proper test utilities
- Maintain test documentation

## 📊 Coverage and Metrics

### Code Coverage
- Aim for >80% code coverage
- Focus on critical business logic
- Use coverage reports for guidance
- Don't sacrifice quality for coverage

### Test Metrics
- Track test execution time
- Monitor test flakiness
- Measure test maintenance effort
- Use test analytics for improvement

## 🚀 Test Automation

### CI/CD Integration
- Run tests on every commit
- Use parallel test execution
- Implement proper test reporting
- Use test results for deployment gates

### Test Environments
- Use separate test environments
- Implement proper environment configuration
- Use test data isolation
- Maintain environment consistency

## 📚 References
- Testing Library: https://testing-library.com/
- Jest Documentation: https://jestjs.io/
- Playwright Documentation: https://playwright.dev/
- Test-Driven Development by Kent Beck
description: Testing strategy and best practices for PDD projects
globs: ["**/*.test.*", "**/*.spec.*", "**/tests/**", "**/test/**"]
alwaysApply: false
---
description:
globs:
alwaysApply: false
---
