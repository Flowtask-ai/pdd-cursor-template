# Global Project Rules - PDD

## ðŸ”„ Project Awareness

- **Read `README.md`** at the beginning of each conversation
- **Analyze existing patterns** before implementing
- **Maintain consistency** with project style

## ðŸ§± Code Structure

- **Maximum 500 lines per file** - refactor if necessary
- **Organize in modules** by feature or responsibility
- **Use relative imports** within packages
- **Use environment variables** for configuration
- **Organize in modules** by feature or responsibility

## ðŸ“Ž Style and Conventions

- **Maximum 500 lines per file** - refactor if necessary for maintainability
- **Use consistent naming conventions** across all files
- **Follow language-specific style guides** for each technology

### Code Documentation
```python
def example_function(param1: str, param2: int) -> bool:
    """
    Brief summary.

    Args:
        param1 (str): Description.
        param2 (int): Description.

    Returns:
        bool: Description.
    """
```

## ðŸ§  AI Rules

- **Never assume missing context** - ask if you're not sure
- **Never hallucinate libraries** - only use verified packages
- **Confirm file paths** before referencing them
- **Don't delete existing code** without explicit instruction

## ðŸ”§ Configuration

- **Use `.env`** for local variables
- **Never commit `.env`** with sensitive information
- **Keep `requirements.txt`** updated
- **Document required dependencies**

## ðŸ“š Documentation

- **Update `README.md`** with new features
- **Keep docstrings** updated
- **Document patterns** in `.cursor/rules/code-examples/`
- **Use semantic versioning** for releases

## ðŸŽ¯ PDD (Prompt Driven Design) Methodology

### Workflow
1. **Define feature** in `PDD/PRDs/requests/your-feature.md`
2. **Generate PRP** using project rules
3. **Execute implementation** with validations
4. **Validate and iterate** until success

### Key Principles
- **Context over prompts**: Provide comprehensive context
- **Examples over explanations**: Show, don't just tell
- **Validation over assumptions**: Test everything
- **Iteration over perfection**: Improve continuously

### Success Metrics
- **All tests pass** automatically
- **Code follows patterns** from examples
- **Documentation is updated** and accurate
- **No regressions** in existing functionality
