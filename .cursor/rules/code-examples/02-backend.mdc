# Backend Patterns and Examples

## üèóÔ∏è API Design Patterns

### RESTful Controller
```typescript
// FastAPI Controller Example
@router.post("/users", response_model=UserResponse)
async def create_user(user_data: CreateUserRequest):
    user_service = UserService()
    user = await user_service.create_user(user_data)
    return UserResponse.from_domain(user)

@router.get("/users/{user_id}", response_model=UserResponse)
async def get_user(user_id: str):
    user_service = UserService()
    user = await user_service.get_user(user_id)
    if not user:
        raise HTTPException(status_code=404, detail="User not found")
    return UserResponse.from_domain(user)
```

### Service Layer
```typescript
// Service Layer Example
class UserService {
  constructor(
    private userRepository: UserRepository,
    private passwordHasher: PasswordHasher,
    private eventBus: EventBus
  ) {}

  async createUser(userData: CreateUserDto): Promise<User> {
    const email = new Email(userData.email);
    const passwordHash = await this.passwordHasher.hash(userData.password);
    const user = new User(new UserId(), email, passwordHash);
    
    await this.userRepository.save(user);
    await this.eventBus.publish(new UserCreatedEvent(user.id));
    
    return user;
  }
}
```

## üóÑÔ∏è Data Access Patterns

### Repository Pattern
```typescript
// Repository Implementation
class SqlUserRepository implements UserRepository {
  async findById(id: string): Promise<User | null> {
    const result = await this.db.query(
      'SELECT * FROM users WHERE id = ?',
      [id]
    );
    return result ? this.mapToUser(result) : null;
  }

  async save(user: User): Promise<void> {
    await this.db.query(
      'INSERT INTO users (id, email, password) VALUES (?, ?, ?)',
      [user.id, user.email, user.password]
    );
  }
}
```

### Unit of Work Pattern
```typescript
// Unit of Work Example
class UnitOfWork {
  private transactions: Transaction[] = [];

  async beginTransaction(): Promise<void> {
    const transaction = await this.db.beginTransaction();
    this.transactions.push(transaction);
  }

  async commit(): Promise<void> {
    for (const transaction of this.transactions) {
      await transaction.commit();
    }
  }

  async rollback(): Promise<void> {
    for (const transaction of this.transactions.reverse()) {
      await transaction.rollback();
    }
  }
}
```

## üîê Security Patterns

### JWT Authentication
```typescript
// JWT Authentication Middleware
class JwtAuthMiddleware {
  async authenticate(request: Request): Promise<User> {
    const token = this.extractToken(request);
    const payload = await this.verifyToken(token);
    return await this.userRepository.findById(payload.userId);
  }

  private extractToken(request: Request): string {
    const authHeader = request.headers.authorization;
    if (!authHeader?.startsWith('Bearer ')) {
      throw new UnauthorizedException();
    }
    return authHeader.substring(7);
  }
}
```

### Password Hashing
```typescript
// Password Hashing Service
class PasswordHasher {
  async hash(password: string): Promise<string> {
    return await bcrypt.hash(password, 12);
  }

  async verify(password: string, hash: string): Promise<boolean> {
    return await bcrypt.compare(password, hash);
  }
}
```

## üìä Validation Patterns

### Request Validation
```typescript
// Pydantic Model Example
class CreateUserRequest(BaseModel):
    email: EmailStr
    password: str = Field(..., min_length=8)
    first_name: str = Field(..., min_length=1, max_length=50)
    last_name: str = Field(..., min_length=1, max_length=50)

    @validator('password')
    def validate_password(cls, v):
        if not re.match(r'^(?=.*[A-Za-z])(?=.*\d)[A-Za-z\d@$!%*?&]{8,}$', v):
            raise ValueError('Password must contain letters and numbers')
        return v
```

## üîÑ Error Handling Patterns

### Global Exception Handler
```typescript
// Global Exception Handler
@exception_handler(ValidationError)
async def validation_exception_handler(request: Request, exc: ValidationError):
    return JSONResponse(
        status_code=422,
        content={"detail": exc.errors()}
    )

@exception_handler(NotFoundException)
async def not_found_exception_handler(request: Request, exc: NotFoundException):
    return JSONResponse(
        status_code=404,
        content={"detail": exc.message}
    )
```

## üìö References
- FastAPI Documentation: https://fastapi.tiangolo.com/
- NestJS Documentation: https://nestjs.com/
- Spring Boot Documentation: https://spring.io/projects/spring-boot
description: Backend patterns and examples for PDD projects
globs: ["**/*.py", "**/*.ts", "**/*.js", "**/*.java", "**/*.cs"]
alwaysApply: false
---
description:
globs:
alwaysApply: false
---
